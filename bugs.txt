# Study the web server's code, and find examples of code that is vulnerable 
# to memory corruption via buffer overflows. Write down a description of 
# each vulnerability in the file /home/httpd/lab/bugs.txt; use the format 
# described in that file. For each vulnerability, describe the buffer which 
# may overflow, how you would structure the input to the web server (i.e., 
# the HTTP request) to overflow the buffer, and whether the vulnerability 
# can be prevented using stack canaries. Locate at least 5 different 
# vulnerabilities.

[http.c:105]
- Buffer that might overflow: char reqpath[2048] (zookd.c, line 65)
- How to structure input for an overflow: send a GET request of the 
  form 'GET /path HTTP/1.0\r\n\r\n' where 'path' is large enough to 
  overflow the buffer. Here, 2067 characters is the lowest number of
  characters to achieve this result.
 - Can be prevented with a stack canary: Yes
 - This buffer overflow is exploited in exploit-2a.py

 	  url_decode(reqpath, sp1);

[http.c:282]
- Buffer that might overflow: char pn[1024] (http.c:276)
- How to structure input for an overflow: send a GET request of the
  form 'Get /path HTTP/1.0\r\n\r\n' where 'path' is large enough
  to overflow the buffer 'pn', but not the buffer 'reqpath' mentioned
  above. This is not only a standard buffer overflow, but can be used
  to take control of the program by overwriting the function pointer
  'handler' right above this buffer in memory.
- Can be prevented with a stack canary: No, you can do an exploit that
  doesn't write past the boundary of the overflowed buffer
- This buffer overflow is exploited in exploit-2b.py

    strcat(pn, name);
    ...
    handler(fd, pn);

[http.c:159]
- Buffer that might overflow: char value[512] (http.c:120)
- How to structure input for an overflow: send a GET request of the
  form 
    'GET /path HTTP/1.0\r\n\r\n'
    'Host: {evil}\r\n\r\n'
  where '{evil}' is a string long enough to overflow the buffer 'value'.
  In my code, I quickly discovered that a string of length 5000 quickly 
  causes undesired behavior from the server.
- Can be prevented with a stack canary: No, you can do an exploit that
  doesn't write past the boundaries of this buffer
- This buffer overflow is exploited in exploit-2c.py

    url_decode(value, sp);

[http.c:165]
- Buffer that might overflow: char envvar[512] (http.c:121)
- How to structure input for an overflow: send a GET request of the
  form
  	'GET /path HTTP/1.0\r\n\r\n'
  	'{evil}: birk105.studby.uio.no:81\r\n\r\n'
  where '{evil}' is a string long enough to overflow the buffer 'envvar'.
  In my code, I quickly discovered that a string of length 1200+ quickly
  causes undesired behavior from the server.
- Can be prevented with a stack canary: No, you can do an exploit that
  doesn't write past the boundaries of this buffer
- This buffer overflow is exploited in exploit-2d.py

    sprintf(envvar, "HTTP_%s", buf);


[http.c:358]
- Buffer that might overflow: char name[1024] (http.c:353)
- How to structure input for an overflow: send a GET request of the
  form
    'GET /path HTTP/1.0\r\n\r\n'
  where path is the string './' repeated long enough to overflow the buffer.
- Can be prevented with a stack canary: No, you can do an exploit that 
  doesn't write past the boundaries of this buffer
- This buffer overflow is exploited in exploit-2e.py
  
    dir_join(name, pn, indices[i]);
